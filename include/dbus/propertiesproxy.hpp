
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__dbusproperties_hpp__PROXY_MARSHAL_H
#define __dbusxx__dbusproperties_hpp__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace org {
namespace freedesktop {
namespace DBus {

class Properties_proxy
: public ::DBus::InterfaceProxy
{
public:

    Properties_proxy()
    : ::DBus::InterfaceProxy("org.freedesktop.DBus.Properties")
    {
        connect_signal(Properties_proxy, PropertiesChanged, _PropertiesChanged_stub);
    }

public:

    /* properties exported by this interface */
public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */

public:

    /* signal handlers for this interface
     */
    virtual void PropertiesChanged(const std::string& interface_name, const std::vector< std::string >& changed_properties, const std::vector< std::string >& invalidated_properties) = 0;

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
    void _PropertiesChanged_stub(const ::DBus::SignalMessage &sig)
    {
        ::DBus::MessageIter ri = sig.reader();

        std::string interface_name;
        ri >> interface_name;
        
        std::vector< std::string > changed_properties;
        ::DBus::MessageIter ai = ri++.recurse();
        do {
            ::DBus::MessageIter ei = ai.recurse();
            changed_properties.push_back(ei.get_string());
        } while(ai++.has_next());
        
        std::vector< std::string > invalidated_properties;
        ri >> invalidated_properties;
        PropertiesChanged(interface_name, changed_properties, invalidated_properties);
    }
};

} } } 
#endif //__dbusxx__dbusproperties_hpp__PROXY_MARSHAL_H
